// Generated by gencpp from file bwi_msgs/LEDSetStatusRequest.msg
// DO NOT EDIT!


#ifndef BWI_MSGS_MESSAGE_LEDSETSTATUSREQUEST_H
#define BWI_MSGS_MESSAGE_LEDSETSTATUSREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <bwi_msgs/LEDStatus.h>

namespace bwi_msgs
{
template <class ContainerAllocator>
struct LEDSetStatusRequest_
{
  typedef LEDSetStatusRequest_<ContainerAllocator> Type;

  LEDSetStatusRequest_()
    : type()  {
    }
  LEDSetStatusRequest_(const ContainerAllocator& _alloc)
    : type(_alloc)  {
  (void)_alloc;
    }



   typedef  ::bwi_msgs::LEDStatus_<ContainerAllocator>  _type_type;
  _type_type type;





  typedef boost::shared_ptr< ::bwi_msgs::LEDSetStatusRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bwi_msgs::LEDSetStatusRequest_<ContainerAllocator> const> ConstPtr;

}; // struct LEDSetStatusRequest_

typedef ::bwi_msgs::LEDSetStatusRequest_<std::allocator<void> > LEDSetStatusRequest;

typedef boost::shared_ptr< ::bwi_msgs::LEDSetStatusRequest > LEDSetStatusRequestPtr;
typedef boost::shared_ptr< ::bwi_msgs::LEDSetStatusRequest const> LEDSetStatusRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bwi_msgs::LEDSetStatusRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bwi_msgs::LEDSetStatusRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace bwi_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'bwi_msgs': ['/home/yohei/rl_ws/src/bwi_common/bwi_msgs/msg', '/home/yohei/rl_ws/devel/.private/bwi_msgs/share/bwi_msgs/msg'], 'bwi_planning_common': ['/home/yohei/rl_ws/src/bwi_common/bwi_planning_common/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::bwi_msgs::LEDSetStatusRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bwi_msgs::LEDSetStatusRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bwi_msgs::LEDSetStatusRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bwi_msgs::LEDSetStatusRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bwi_msgs::LEDSetStatusRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bwi_msgs::LEDSetStatusRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bwi_msgs::LEDSetStatusRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "251b499dfe6a8804c65e16280eab264c";
  }

  static const char* value(const ::bwi_msgs::LEDSetStatusRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x251b499dfe6a8804ULL;
  static const uint64_t static_value2 = 0xc65e16280eab264cULL;
};

template<class ContainerAllocator>
struct DataType< ::bwi_msgs::LEDSetStatusRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bwi_msgs/LEDSetStatusRequest";
  }

  static const char* value(const ::bwi_msgs::LEDSetStatusRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bwi_msgs::LEDSetStatusRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bwi_msgs/LEDStatus type\n\
\n\
================================================================================\n\
MSG: bwi_msgs/LEDStatus\n\
# LED Status\n\
\n\
# Service Variables\n\
uint8 RUN_ON = 1\n\
uint8 RUN_OFF = 0\n\
uint8 CAMERA_ON = 3\n\
uint8 CAMERA_OFF = 2\n\
\n\
# Selects which animation to execute\n\
\n\
uint8 status\n\
";
  }

  static const char* value(const ::bwi_msgs::LEDSetStatusRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bwi_msgs::LEDSetStatusRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LEDSetStatusRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bwi_msgs::LEDSetStatusRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bwi_msgs::LEDSetStatusRequest_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    s << std::endl;
    Printer< ::bwi_msgs::LEDStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BWI_MSGS_MESSAGE_LEDSETSTATUSREQUEST_H
